import json
import requests
from src.dtos.kis.tradeDto import TradeDto
from src.config import Global
from src.utils.constants.trId import TRADE_ID
from langchain_core.tools import tool


class KisService:
    _instance = None
    url: str

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls, *args, **kwargs)
        return cls._instance

    def __init__(self):
        # Ï¥àÍ∏∞Ìôî ÏΩîÎìú (Ìïú Î≤àÎßå Ìò∏Ï∂úÎê®)
        if not hasattr(
            self, "_initialized"
        ):  # Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎêú Í≤ΩÏö∞Îäî Îã§Ïãú Ï¥àÍ∏∞ÌôîÌïòÏßÄ ÏïäÏùå
            self._initialized = True
            self._data = {}

            # self.url = "https://openapi.koreainvestment.com:9443"  # Ïã§Ï†Ñ Ìà¨Ïûê url

            self.url = "https://openapivts.koreainvestment.com:29443"  # Î™®Ïùò Ìà¨Ïûê url

    def get_access_token(self) -> str:
        """
        KIS Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Î∞úÍ∏â
        """

        response = requests.post(
            url=f"{self.url}/oauth2/tokenP",
            headers={
                "Content-Type": "application/json; charset=UTF-8",
            },
            data=json.dumps(
                {
                    "grant_type": "client_credentials",
                    "appkey": Global.env.KIS_APP_KEY,
                    "appsecret": Global.env.KIS_SECRET_KEY,
                }
            ),
        )

        body = response.json()

        return body["access_token"]

    @tool
    @staticmethod
    def get_overseas_stock_daily_price(
        input: TradeDto.GetOverseasStockDailyPriceInput,
    ) -> TradeDto.GetOverseasStockDailyPriceOutput:
        """
        # Ìï¥Ïô∏ Ï£ºÏãù Í∏∞Í∞ÑÎ≥Ñ ÏãúÏÑ∏
        You can get a periodical market price of foreign stocks. "AUTH" is always an empty string,
        "EXCD" should always be "NAS", where "NAS" stands for Nasdaq.
        "SYMB" refers to the stock code.
        "GUBN" stands for days if "0", weeks if "1", and months if "2".
        "BYMD" means the reference date of the query and has an empty string as a value.
        "MODP" means "zero" means non-reflective, and "1" means "1" as default.
        """

        try:
            print("-----input-----")
            print(input)
            print("-----input-----")

            url = "https://openapivts.koreainvestment.com:29443"

            response = requests.get(
                url=f"{url}/uapi/overseas-price/v1/quotations/dailyprice",
                headers={
                    "Authorization": f"Bearer {input.access_token}",
                    "appkey": Global.env.KIS_APP_KEY,
                    "appsecret": Global.env.KIS_SECRET_KEY,
                    "tr_id": "HHDFS76240000",
                },
                params=input,
            )

            print(f"üìå ÏöîÏ≤≠ URL: {response.url}")
            print(f"üîπ ÏùëÎãµ ÏΩîÎìú: {response.status_code}")
            print(f"üîπ ÏùëÎãµ ÎÇ¥Ïö©: {response.text}")

            body: TradeDto.GetOverseasStockDailyPriceOutput = response.json()

            return body
        except Exception as e:
            print(e)
            raise e

    def order_overseas_stock(
        self,
        access_token: str,
        order_data: TradeDto.OrderOverseasStockInput,
        isBuy: bool,
    ) -> dict:
        """
        Ìï¥Ïô∏ Ï£ºÏãù Ï£ºÎ¨∏
        """

        trade = TRADE_ID["usa"]["buy"] if isBuy else TRADE_ID["usa"]["sell"]

        try:
            response = requests.post(
                url=f"{self.url}/uapi/overseas-stock/v1/trading/order",
                headers={
                    "Content-Type": "application/json; charset=UTF-8",
                    "Authorization": f"Bearer {access_token}",
                    "appkey": Global.env.KIS_APP_KEY,
                    "appsecret": Global.env.KIS_SECRET_KEY,
                    "tr_id": trade,
                },
                data=json.dumps(order_data),
            )

            return response.json()
        except Exception as e:
            print(e)
            raise e

    def book_overseas_stock_order(
        self,
        access_token: str,
        order_data: TradeDto.BookOverseasStockOrderInput,
        isBuy: bool,
    ):
        """
        Ìï¥Ïô∏ Ï£ºÏãù Ï£ºÎ¨∏ ÏòàÏïΩ
        """

        trade = TRADE_ID["usa"]["buy"] if isBuy else TRADE_ID["usa"]["sell"]

        try:
            response = requests.post(
                url=f"{self.url}/uapi/overseas-stock/v1/trading/order",
                headers={
                    "Content-Type": "application/json; charset=UTF-8",
                    "Authorization": f"Bearer {access_token}",
                    "appkey": Global.env.KIS_APP_KEY,
                    "appsecret": Global.env.KIS_SECRET_KEY,
                    "tr_id": trade,
                },
                data=json.dumps(order_data),
            )

            return response.json()
        except Exception as e:
            print(e)
            raise e
